{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	// ===HERRAMIENTAS ADICIONALES===
	"TODO": {
		"prefix": "_todo",
		"body": [
			"// todo - marca aÃ±adida$1"
		],
		"description": "Generar una marca"
	},
	"Comentario Destacado": {
		"prefix": "_ref",
		"body": [
			"// **DESTACADO**  $1"
		],
		"description": "Destacado"
	},
	"Punto de referencia": {
		"prefix": "_ref",
		"body": [
			"// ! **********PUNTO DE REFERENCIA**********$1"
		],
		"description": "Punto de referencia"
	},
	"Posible solucion": {
		"prefix": "_ref",
		"body": [
			"// ? **********POSIBLE SOLUCION**********$1"
		],
		"description": "Posible solucion"
	},
	"Consulta Api Axios": {
		"prefix": "_api",
		"body": [
			"let consulta = null",
			"try {",
			"  consulta = await this.$$axios.$get('/PROYECTO/RUTA_API', {",
			"    params: {",
			"      // Encuesta: 6df7c216-2ed7-4d26-a2f9-42e3d2d1cc37 , Enfermeria: 66735fbc-45e2-475f-8cb5-34831214b0fc ",
			"      uuidCategorias: ['6df7c216-2ed7-4d26-a2f9-42e3d2d1cc37']", 
			"    }",
			"  })",
			"  console.log('datos RUTA_API:', consulta.data.respuesta)",
			"} catch (error) {",
			"  console.error(`Error capturado (RUTA_API): ${error\\}`)",
			"}"
		],
		"description": "Consulta Api Axios"
	},
	"Logica en template string": {
		"prefix": "_template",
		"body": [
			"${alumnos.map(a=> `${a.nombre} ${a.nota>5?'aprobado':'suspenso'}`)}",
			"console.log(`variable, ${5>6 ? 'si' : 'no'}`)"
		],
		"description": "Ejemplos de logica en template string"
	},
	// ===CONSOLE CHROME===
	"Print to console": {
		"prefix": "_cl",
		"body": [
			"console.log('$1'$2)"
		],
		"description": "Log output to console"
	},
	"Template string console": {
		"prefix": "_log",
		"body": [
			"console.log(`variable$1, ${variable$2}`)"
		],
		"description": "Log output to console"
	},
	// ===MANEJO DE ERRORES===
	"Try catch": {
		"prefix": "_try_catch",
		"body": [
			"try {",
			"  $1",
			"} catch (error) {",
			"  console.error(`Error capturado:  ${error\\}`)",
			"}"
		],
		"description": "Manejo de errores"
	},
	// ===CONDICIONALES===
	"Ternario": {
		"prefix": "_ternario",
		"body": [
			"'condicion'$1 ? `valor si` $2 : `valor no`$3"
		],
		"description": "Condicional Ternario"
	},
	"Ternario 2": {
		"prefix": "_ternario",
		"body": [
			"let max = ( num1 > num2 ) ? num1 : num2"
		],
		"description": "Condicional Ternario 2"
	},
	"Ternario 3": {
		"prefix": "_ternario",
		"body": [
			"let miEdad = 24",
			"let mayorEdad = (miEdad > 18) ? `SÃ­, eres mayor de edad` : `No, sigue intentando`"
		],
		"description": "Condicional Ternario 2"
	},
	"If": {
		"prefix": "_if",
		"body": [
			"if ($1) {",
			"  $2",
			"}"
		],
		"description": "Condicional IF"
	},
	"If - Else": {
		"prefix": "_if_else",
		"body": [
			"if ($1) {",
			"  $2",
			"} else {",
			"  $3",
			"}"
		],
		"description": "Condicional IF - ELSE"
	},
	// ===BUCLES ITERADORES===
	"For": {
		"prefix": "_for",
		"body": [
			"for (let i = 0; i < variable$1.length; i++) {",
			"  console.log(`${i} - dato: ${variable[i]}`$2)",
			"}"
		],
		"description": "Bucle For"
	},
	"ForIn": {
		"prefix": "_forIn",
		"body": [
			"// let numeros = [10,20,30,40,50]",
			"for (let num in numeros) {",
			"  console.log(`num: ${num\\}`)",
			"}"
		],
		"description": "Bucle Forin"
	},
	"For Each": {
		"prefix": "_for_each",
		"body": [
			"array$1.forEach(elemento => {",
			"  $2",
			"})"
		],
		"description": "Arrow function anonima"
	},
	"Map": {
		"prefix": "_map",
		"body": [
			"array.map((elemento) => {",
			"  console.log(`elemento.id: ${producto.id\\}`)",
			"})"
		],
		"description": "Map Arrow function"
	},
	// ===ARROW FUNCTIONS===
	"Arrow Function De Expresion": {
		"prefix": "_arrow",
		"body": [
			"const nameFunction$1 = () => {",
			"  $2",
			"}",
			"/* cuando no colocamos llaves retorna valor de la funcion */",
			"// const mensaje = tipo => 'esto es un mensaje de ' + tipo",
			"// console.log(mensaje('prueba')) $3"
		],
		"description": "Expression Arrow Function"
	},
	"Arrow Function Default Value": {
		"prefix": "_arrow_default_dalue",
		"body": [
			"const nameFunction$1 = (parametro = 'valor por defecto') => {",
			"  console.log(`parametro, ${parametro\\}`)$2",
			"}",
			"nameFunction()"
		],
		"description": "Expression Arrow Function Default Value"
	},
	"Arrow Function Anonima": {
		"prefix": "_arrow_anonima",
		"body": [
			"() => {",
			"  $1",
			"}"
		],
		"description": "Arrow function anonima"
	},
	"Arrow Function Auto-Executable": {
		"prefix": "_arrow_auto_executable",
		"body": [
			"(() => {",
			"  $1",
			"})()"
		],
		"description": "Arrow function auto-ejecutable"
	},
	// ===FUNCIONES JS===
	"Set timeout": {
		"prefix": "_set_timeout",
		"body": [
			"setTimeout(() => { console.log(`Hello`)$1 }, 3000$2)"
		],
		"description": "Set Timeout with arrow function"
	},
	"Set Interval": {
		"prefix": "_set_interval",
		"body": [
			"setInterval(() => { console.log(`Hello`)$1 }, 3000$2)"
		],
		"description": "Set Interval with arrow function"
	},
	// ===OBJETOS - DESTRUCTURING ===
	"Destructuring Objetc": {
		"prefix": "_destructuring_objects",
		"body": [
			"let persona = {",
			"  nombre: 'Mateo',",
			"  apellido: 'Venegas'",
			"}$1",
			"// creo variables a partir de la propiedades del objeto",
			"const {nombre, apellido} = persona",
			"console.log(`Nombre completo: , ${nombre\\} ${apellido\\}`)"
		],
		"description": "Destructuracion de objetos"
	},
	// === ARRAYS - DESTRUCTURING ===
	"Destructuring Arrays": {
		"prefix": "_destructuring_arrays",
		"body": [
			"let persona = ['Mateo', 'Venegas', 4, 'Masculino', 'Chile', 'Cerro Navia']",
			"let [nombre, apellido, edad, , pais, comuna] = persona // Si no quiero una variable me la salto (Masculino)",
			"console.log(nombre, apellido, edad, pais, comuna)"
		],
		"description": "Destructuracion de arreglos"
	},
	//===ASINCRONISMO JS===
	"Promesa 1 Funcion new Promesi": {
		"prefix": "_promesa1",
		"body": [
			"function nombreFuncionPromesa (value) {",
			"  if (!value || value !== Number) return Promise.reject(new Error('No se ingreso valor o no es un nÃºmero'))",
			"  return new Promise((resolve, reject) => {",
			"    resolve({",
			"      value,",
			"      done: 'Se resolvio la promesa'",
			"    })",
			"    // reject(new Error('No se reolvio la promesa'))",
			"  })",
			"}",
			"// Llamado funcion promesa",
			"funcionPromesa()",
			"  .then(resultado => console.log(`resultado: ${resultado.done\\}`))",
			"  .then(resultado => console.log(`Promesa Complida ðŸ˜€`))",
			"  .catch(error => console.log(`Error Promesa: ${error.message\\}`))"
		],
		"description": "Sintaxis Promesas"
	},
	"Promesa 2 en variable": {
		"prefix": "_promesa2",
		"body": [
			"const aplicarDescuento = new Promise((resolve, reject) => {",
			"  let descuento = false",
			"  if (descuento) {",
			"    resolve('El descuento pudo ser aplicado')",
			"  } else {",
			"    reject(new Error('Hubo problemas para aplicar el descuento'))",
			"  }",
			"})",
			"// Llamo a la promesa",
			"aplicarDescuento",
			"  .then(resultado => console.log(`resultado: ${resultado\\}`))",
			"  .catch(error => console.log(`error: ${error.message\\}`))"
		],
		"description": "Sintaxis Promesas"
	},
	"Promesa 3 en variable": {
		"prefix": "_promesa3",
		"body": [
			"let paises = []",
			"const nuevoPais = (pais) => new Promise( (resolve, reject) => {",
			"  paises.push(pais)",
			"  resolve('resultado del resolvex')",
			"  reject(new Error('No fue posible agregar el nuevo pais'))",
			"})",
			"",
			"nuevoPais('Nueva Zelanda')",
			"  .then(resultado => {",
			"    console.log(`resultado ${resultado\\}`)",
			"    console.log(`paises ${paises\\}`)",
			"  })",
			"  .then(resultado => {",
			"    setTimeout(() => {",
			"      nuevoPais('Inglaterra')",
			"      console.log(`paises ${paises\\}`)",
			"    }, 2000)",
			"  })",
			"  .catch(error => { console.log(`Error ${error\\}`) })"
		],
		"description": "Sintaxis Promesas"
	},
	"Async Await (function)": {
		"prefix": "_async_await1",
		"body": [
			"async function nombreFuncion () {",
			"  let consulta = null",
			"  try {",
			"    consulta = await this.$axios.$get('/enfermeria/RUTA_API', {})",
			"    console.log('datos RUTA_API: ',consulta.respuesta.datos)",
			"  } catch (error) {",
			"    console.error(`error RUTA_API ${error\\}`)",
			"  }",
			"}"
		],
		"description": "Async Await"
	},
	"Async Await (arrow function)": {
		"prefix": "_async_await2",
		"body": [
			"const nombreFuncion = async () => {",
			"  let consulta = null",
			"  try {",
			"    consulta = await this.$axios.$get('/enfermeria/RUTA_API', {})",
			"    console.log('datos RUTA_API', consulta.respuesta.datos)",
			"  } catch (error) {",
			"    console.error(`error RUTA_API ${error\\}`)",
			"  }",
			"}"
		],
		"description": "Async Await arrow function"
	},
	"Con mÃ¡s de un llamado Await 1": {
		"prefix": "_async_await3",
		"body": [
			"function descargarNuevosClientes() {",
			"  return new Promise((resolve) => {",
			"    console.log('Descargando Clientes....')",
			"    setTimeout(() => {",
			"      resolve('Los clientes fueron descargados')",
			"    }, 5000)",
			"  })",
			"}",
			"function descargarUltimosPedidos() {",
			"  return new Promise((resolve) => {",
			"    console.log('Descargando Pedidos....')",
			"    setTimeout(() => {",
			"      resolve('Los pedidos fueron descargados')",
			"    }, 5000)",
			"  })",
			"}",
			"//",
			"// Async await - Bloquea una antes de la otra",
			"// Puede que en situacciones sea lo necesarios",
			"// const app = async () => {",
			"//     try {",
			"//         const clientes = await descargarNuevosClientes();",
			"//         console.log(clientes);",
			"//",
			"//         const pedidos = await descargarUltimosPedidos();",
			"//         console.log(pedidos);",
			"//     } catch (error) {",
			"//         console.log(error)",
			"//     }",
			"// }",
			"//",
			"// La soluciÃ³n, Promise.all();",
			"// Es muy comÃºn tener 2 Async Await, es probable que quieras en una misma funciÃ³n descargar los clientes y tambien los pedidos",
			"// ? Una no espera a que termina la otra, ambas se ejectan al mismo tiempo ganando en performance de la APP",
			"const app = async () => {",
			"  try {",
			"    const respuesta = await Promise.all([descargarNuevosClientes(), descargarUltimosPedidos()])",
			"    console.log(respuesta)",
			"    console.log(respuesta[0])",
			"    console.log(respuesta[1])",
			"  } catch (error) {",
			"    console.log(error)",
			"  }",
			"}",
			"// LLAMADO A LA FUNCION",
			"app()"
		],
		"description": "Async Await arrow function"
	},
	"Con mÃ¡s de un llamado Await 2": {
		"prefix": "_async_await4",
		"body": [
			"const cuadradoPromise = (value) => {",
			"  if (typeof value !== 'number') {",
			"    return Promise.reject(new Error(`Error, el valor 'value ' ingresado no es un nÃºmero`))",
			"  }",
			"  return new Promise((resolve, reject) => {",
			"    setTimeout(() => {",
			"      resolve({",
			"        value,",
			"        result: value * value",
			"      })",
			"    }, 0 | Math.random() * 1000)",
			"  })",
			"}",
			"const funcionAsincronaExpresada = async () => {",
			"  try {",
			"    console.log('Inicio Async Function')",
			"    //",
			"    let obj = await cuadradoPromise(0)",
			"    console.log(`Async Function: ${obj.value\\}, ${obj.result\\}`)",
			"    //",
			"    obj = await cuadradoPromise(1)",
			"    console.log(`Async Function: ${obj.value\\}, ${obj.result\\}`)",
			"    //",
			"    obj = await cuadradoPromise(2)",
			"    console.log(`Async Function: ${obj.value\\}, ${obj.result\\}`)",
			"    //",
			"    obj = await cuadradoPromise(3)",
			"    console.log(`Async Function: ${obj.value\\}, ${obj.result\\}`)",
			"    //",
			"    obj = await cuadradoPromise(4)",
			"    console.log(`Async Function: ${obj.value\\}, ${obj.result\\}`)",
			"    //",
			"    obj = await cuadradoPromise(5)",
			"    console.log(`Async Function: ${obj.value\\}, ${obj.result\\}`)",
			"    //",
			"    console.log('Fin Async Function')",
			"  } catch (err) {",
			"    console.error(`Error capturado: ${err.message\\}`)",
			"  }",
			"}",
			"funcionAsincronaExpresada()"
		],
		"description": "Async Await function"
	},
	// ===CONSULTAR APIS===
	"Fetch (llamado api)": {
		"prefix": "_fetch",
		"body": [
			"fetch('https://randomuser.me/api/')",
			"  .then(response => response.json())",
			"  .then(data => console.log(`Datos de usuario: ${data\\}`))",
			"  .catch(error => console.error(`Error capturado: ${error\\}`))"
		],
		"description": "Consulta api con Fetch"
	}
}